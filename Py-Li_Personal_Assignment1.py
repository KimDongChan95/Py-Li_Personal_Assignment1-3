import random

random_number = random.randint(1, 10)  # 1부터 10사이의 무작위 정수 생성 후 random_number 변수에 저장

user_input = int(input("""1과 10 사이의 숫자를 하나 정했습니다.
이 숫자는 무엇일까요?
예상 숫자 : """))  # 사용자에게 입력을 받음

while random_number != user_input: #while문 뒤의 조건이 거짓일때 반복이 멈춤 >> 즉, 두 변수가 같을 때 반복을 멈춘다.
    if user_input > random_number:
        print("너무 큽니다. 다시 입력하세요!")
    elif user_input < random_number:
        print("너무 작습니다. 다시 입력하세요!")

    user_input = int(input("예상숫자: "))  # 사용자에게 다시 입력받음

print("정답입니다!")


문제와 추론 과정]
1. 숫자 맞추기 게임 (필수)

이 과제에서는 파이썬 프로그래밍 언어를 활용하여 숫자 맞추기 게임을 만드는 것이 목표입니다. 숫자 맞추기 게임은 컴퓨터가 생각한 숫자를 맞추는 게임으로, 플레이어는 숫자를 입력하고 컴퓨터가 생각한 숫자와 비교하여 “작다" 혹은 "크다" 힌트를 받아가며 숫자를 맞추는 게임입니다.
 
과제 내용
 
플레이어와 컴퓨터가 참여하는 숫자 맞추기 게임을 만드세요.
 
프로그램은 다음과 같은 기능을 포함해야 합니다.
 
컴퓨터는 1부터 10 사이의 랜덤한 숫자를 생성합니다.
 
플레이어는 숫자를 입력하고, 입력한 숫자가 큰지 작은지 힌트를 얻습니다.
 
플레이어가 숫자를 맞힐 때까지 위 과정을 반복합니다.
 
입출력 예시
→ 예시일 뿐 완전히 똑같이는 하지 않으셔도 돼요! 주어진 조건만 다 맞추시면 됩니다!
 

1과 10 사이의 숫자를 하나 정했습니다.
이 숫자는 무엇일까요?
예상 숫자: 5
너무 큽니다. 다시 입력하세요.
예상 숫자: 4
너무 큽니다. 다시 입력하세요.
예상 숫자: 3
정답입니다!

​
참고 자료
 
랜덤 숫자 생성을 위한 random 모듈 사용법
 

import random
 
[코드 추론과정]
(1) 컴퓨터는 1부터 10 사이의 랜덤한 숫자를 생성합니다.

>> 1부터 10 사이의 랜덤한 숫자를 저장해둔다.

 

챗GPT를 통한 "import random 에 대한 설명" 검색 결과

import random는 Python 프로그래밍에서 무작위 숫자나 값을 생성하기 위해 사용하는 코드입니다. 여기서 random은 Python의 내장 라이브러리 중 하나로, 다양한 무작위 관련 기능을 제공합니다.

사용 예시
무작위 숫자 생성
random.randint(a, b): a와 b 사이의 정수를 무작위로 반환합니다.
import random
print(random.randint(1, 10))  # 1과 10 사이의 무작위 정수

 

(2) 플레이어는 숫자를 입력하고, 입력한 숫자가 큰지 작은지 힌트를 얻습니다.

>>사용자에게 숫자를 입력 받는데 입력한 숫자가 크면 크다는 힌트를 주고 작다면 작다는 힌트를 주는 문구를 출력해준다.

 

int(input())함수를 사용하면 좋을 것 이며, if조건문을 통해 클경우 출력할 문구와, 작을경우 출력할 문구를 print()함수로 작성해주면 좋을것 같다.

 

(3) 플레이어가 숫자를 맞힐 때까지 위 과정을 반복합니다. while함수를 쓰면 좋을거 같다.

import random

random_number = random.randint(1,10) # 1부터 10사이의 무작위 정수 생성후 random_number변수에 저장

user_input = int(input("""1과 10 사이의 숫자를 하나 정했습니다.
이 숫자는 무엇일까요?
예상 숫자 : """)) # 사용자에게 입력을 받음
 
if user_input > random_number:
    print("너무 큽니다. 다시 입력하세요!")
elif user_input < random_number:
    print("너무 작습니다. 다시 입력하세요!")
else:
    print("정답입니다!")
 

여기까지는 딱 한번 물어보고 맞추든 틀리든 결과를 알려주고 프로그램이 종료된다.

이제 while반복문을 적용해보자

조건문 기반으로 조건이 거짓이 될때까지 반복하는 while루프.

그렇다면 조건에 사용자에게 입력받은 숫자와 아까 1에서 10 사이의 숫자를 하나 정하여 저장해둔 변수 random_number가 같은지 따져보고 같다면 멈추게 하면 될 것이다 .

처음에 random_number==user_input를 생각했는데, 같지 않으면 멈추는게 아니라 같으면 멈춘다니까 

random_number!=user_input 라고 수정해주면 같으면 반복이 멈추도록 할수 있을것이다.

그리고 if-elif문을 while반복문 내부에 들어가도록 들여쓰기 해준다.

while 문이 거짓이 되는 순간

즉, random_number와 user_input의 값이 같지 않지 않을 때(같을때) 반복문이 멈추고 "정답입니다"를 출력한다.

반면에, random_number와 user_input의 값이 같지 않을때(true)일때는 사용자에게 다시 입력받는 행동까지를 반복한다.

과제후 새로 깨달은점 :while 루프에서 조건이 거짓일 때 반복이 멈춘다고 이해하는 것 보다(헷갈리니) 조건이 참인 동안 반복된다고 이해하는게 나을 것 같다.
또 else문에는 모든 조건이 거짓일때 실행할 코드를 작성해주는데 while도 거짓일때 반복이 멈추고 다음코드를 실행하기 때문에 중첩되는 느낌이 있어서 else는 생략해도 된다